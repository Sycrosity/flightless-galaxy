[package]
name = "flightless-galaxy"
version = "0.1.0"
authors = ["Sycrosity"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
#for loading assets with less boilerplate code
bevy_asset_loader = { version = "0.13", features = ["standard_dynamic_assets", "2d"] } #, /*"progress_tracking", "stageless", "progress_tracking_stageless"] }
# #tracking asset loading progress
# iyes_progress = "0.6"
# #a better alternative to bevy states
# iyes_loopless = "0.8"
#for serialising data
serde = "1.0"
#serialising json files
serde_json = "1.0"
#for anything random related
rand = "0.8"
#allows running of code only on specific platforms
cfg-if = "1"
#for serialising and deserialising of enums into strings
strum = { version = "0.24", features = ["derive"] }
strum_macros = "0.24"
#for gamepad input/output
gilrs = "0.10"
#for multiplayer networking and authentication
bevy_renet = "0.0.5"
renet = "0.0.9"
#a file format (Rusty Object Notation)
ron = "0.8"
#complex input handling
leafwing-input-manager = "0.7"


[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1"

#features all targets should have
[dependencies.bevy]
version = "0.9"
default-features = true
features = ["ktx2"]

#features only for targets that aren't wasm or musl
[target.'cfg(not(any(target_arch = "wasm32",target_env = "musl")))'.dependencies.bevy]
version = "0.9"
default-features = true
features = ["dynamic"]

# [target.'cfg(target_env = "musl")'.dependencies.bevy]
# version = "0.8"
# default-features = true
# features =["ktx2"]


#fix macos window weirdness - not a good fix but it should work
[target.'cfg(target_os = "macos")'.dependencies]
cocoa = "0.24"

# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
opt-level = 3

[workspace]
resolver = "2"

[profile.wasm-release]
# Use release profile as default values
inherits = "release"
# Optimize with size in mind, also try "s", sometimes it is better.
# This doesn't increase compilation times compared to -O3, great improvements
opt-level = "z"
# Do a second optimization pass removing duplicate or unused code from dependencies.
# Slows compile times, marginal improvements
lto = "fat"

# When building crates, optimize larger chunks at a time
# Slows compile times, marginal improvements
codegen-units = 1
